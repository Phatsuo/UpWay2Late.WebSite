<?xml version="1.0"?>
<!-- RSS generated by UpWay2Late.com Software on 10/27/2016; 5:00:00 AM Arizona Time -->
<rss version="2.0" xmlns:blogChannel="http://www.upway2late.com/blog">
	<channel>
		<title>UpWay2Late.com Software</title>
		<link>http://www.upway2late.com/</link>
		<description>A blog about software development.</description>
		<language>en-us</language>
		<copyright>Copyright 2016-2099, James T Katic</copyright>
		<lastBuildDate>Thursday, 28 Oct 2016 00:00:00 GMT</lastBuildDate>
		<managingEditor>admin@upway2late.com</managingEditor>
		<webMaster>admin@upway2late.com</webMaster>
		<ttl>40</ttl>
		<item>
			<title>Using the Angular 2 CLI with .NET Core 1.0 and Visual Studio 2015</title>
			<description>Before the current revision, this web site was most recently written in Angular 2. That was in April 2016,
            when Angular 2 was still in beta. I created it quite manually - not even knowing the Angular 2 CLI existed.
            I have rewritten it now that Angular 2 is RTM, using Angular CLI Beta 15. The site now also uses .NET Core,
            and it's all comprised in a Visual Studio 2015 solution. It's not easy to get all these things working together,
            so he's my first attempt at an actual blog to share some knowledge...</description>
			<pubDate>Thu, 22 Sep 2016 07:35:00 GMT</pubDate>
			<guid>889D8CC8-94D5-4874-B36F-3D09D317C4D2</guid>
			<link>http://www.upway2late.com/#/blogs/angular2-cli-and-dot-net-core</link>
		</item>
		<item>
			<title>Angular 2 Templates with Embedded Gists</title>
			<description>I wrote my first blog post last week, and it didn't take long during that task to run into an all new
            issue worthy of a second post. I was blogging about Angular 2, and the Angular 2 CLI - and using both of
            them in the creation of the blog. So obviously, that blog post is going to contain some code examples. Adding
            those examples into an Angular 2 template proved to be a lot more problematic that I would have guessed. Here's
            what happened and how I solved (or maybe more accurately worked-around) the issues...</description>
			<pubDate>Wed, 29 Sep 2016 4:16:00 GMT</pubDate>
			<guid>889D8CC8-94D5-4874-B36F-3D09D317C4D3</guid>
			<link>http://www.upway2late.com/#/blogs/angular2-template-with-embedded-gist</link>
		</item> 
		<item>
			<title>Angular 2 Applications with UI Blocking</title>
			<description>This week I am presenting what I think will be a pretty quick walk though on how to add UI Blocking
            to an Angular 2 application. The classic use-case for this feature is blocking the UI from user input
            while some long running task, like an AJAX call, is taking place. We have two goals here. (1) Keep the
            user from taking further action until the long running task completes, and (2) make sure the user is
            informed as to why they are just sitting there doing nothing...</description>
			<pubDate>Fri, 07 Oct 2016 5:32:00 GMT</pubDate>
			<guid>889D8CC8-94D5-4874-B36F-3D09D317C4D4</guid>
			<link>http://www.upway2late.com/#/blogs/angular2-and-ui-blocking</link>
		</item>
		<item>
			<title>React Applications with UI Blocking</title>
			<description>This week I am presenting what I think will be a pretty quick walk though on how to add UI Blocking
            to a React application. The classic use-case for this feature is blocking the UI from user input
            while some long running task, like an AJAX call, is taking place. We have two goals here. (1) Keep the
            user from taking further action until the long running task completes, and (2) make sure the user is
            informed as to why they are just sitting there doing nothing...</description>
			<pubDate>Thursday, 13 Oct 2016 23:00:00 GMT</pubDate>
			<guid>889D8CC8-94D5-4874-B36F-3D09D317C4D5</guid>
			<link>http://www.upway2late.com/#/blogs/react-and-ui-blocking</link>
		</item>
		<item>
			<title>What's New With .Net Core Console Apps</title>
			<description>I recently spent some time writing several console applications for one of my projects. A few of the libraries
            these applications had to access were written in .NET Core, so it made sense to use .NET Core for the console
            applications themselves. There are quite a few differences between a .NET Core console application and a
            .NET 4.6.1 console application. We have new things in configuration, command line parameters, and especially
            deployment. Let's take a peek, shall we...</description>
			<pubDate>Thursday, 28 Oct 2016 00:00:00 GMT</pubDate>
			<guid>889D8CC8-94D5-4874-B36F-3D09D317C4D6</guid>
			<link>http://www.upway2late.com/#/blogs/dot-net-core-console-apps</link>
		</item>
	</channel>
</rss>